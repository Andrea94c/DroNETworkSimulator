# ------------------ Packet ----------------------
from src.utilities import utilities
from src.entities.generic.entity import Entity


class Packet(Entity):
    """ A packet is an object created out of an event monitored on the aoi. """
    def __init__(self, time_step_creation, simulator, event_ref: "Event" = None):
        """ the event associated to the packet, time step in which the packet was created
         as for now, every packet is an event. """

        event_ref_crafted = event_ref

        # id(self) is the id of this instance (unique for every new created packet),
        # the coordinates are those of the event
        super().__init__(id(self), event_ref_crafted.coords, simulator)

        self.time_step_creation = time_step_creation
        self.event_ref = event_ref_crafted
        self.__TTL = -1  # TTL is the number of hops that the packet crossed
        self.__max_TTL = self.simulator.packets_max_ttl
        self.number_retransmission_attempt = 0

        # self.hops = set()  # All the drones that have received/transmitted the packets
        self.last_2_hops = []
        # add metrics: all the packets generated by the drones, either delivered or not (union of all the buffers)
        if event_ref is not None:
            self.add = self.simulator.metrics.drones_packets.add(self)

        self.optional_data = None  # list
        self.time_delivery = None

        # if the packet was sent with move routing or not
        self.is_move_packet = None

    def distance_from_depot(self):
        return utilities.euclidean_distance(self.simulator.depot_coordinates, self.coords)

    def age_of_packet(self, cur_step):
        return cur_step - self.time_step_creation

    def to_json(self):
        """ return the json repr of the obj """

        return {"coord": self.coords,
                "i_gen": self.time_step_creation,
                "i_dead": self.event_ref.deadline,
                "id": self.identifier,
                "TTL": self.__TTL,
                "id_event": self.event_ref.identifier }

    def add_hop(self, drone):
        """ add a new hop in the packet """

        if len(self.last_2_hops) == 2:
            self.last_2_hops = self.last_2_hops[1:]  # keep just the last two HOPS
        self.last_2_hops.append(drone)

        # self.hops.add(drone.identifier)
        self.increase_TTL_hops()

    def increase_TTL_hops(self):
        self.__TTL += 1

    def increase_transmission_attempt(self):
        self.number_retransmission_attempt += 1

    def is_expired(self, cur_step):
        """ a packet expires if the deadline of the event expires, or the maximum TTL is reached """
        return cur_step > self.event_ref.deadline  # or self.__TTL > self.__max_TTL  # TODO: questionable

    def __repr__(self):
        packet_type = str(self.__class__).split(".")[-1].split("'")[0]
        return packet_type + "id:" + str(self.identifier) + " event id: " + str(self.event_ref.identifier) + " c:" + str(self.coords)

    def append_optional_data(self, data):
        """ append optional data in the hello emssage to share with neigh drones somethings """
        self.optional_data = data


class DataPacket(Packet):
    """ Basically a Packet"""
    def __init__(self, time_step_creation, simulator, event_ref: "Event" = None):
        super().__init__(time_step_creation, simulator, event_ref)


class ACKPacket(Packet):
    def __init__(self, src_drone, dst_drone, simulator, acked_packet, event_ref: "Event",  time_step_creation = None):
        super().__init__(time_step_creation, simulator, event_ref)
        self.acked_packet = acked_packet  # packet that the drone who creates it wants to ACK

        # source and destination of a packet
        self.src_drone = src_drone
        self.dst_drone = dst_drone

class HelloPacket(Packet):
    """ The hello message is responsible to give info about neighborhood """
    def __init__(self, src_drone, time_step_creation, simulator, cur_pos, speed, next_target, event_ref):
        super().__init__(time_step_creation, simulator, event_ref=event_ref)
        self.cur_pos = cur_pos
        self.speed = speed
        self.next_target = next_target
        self.src_drone = src_drone  # Don't use this

