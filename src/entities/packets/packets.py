# ------------------ Packet ----------------------
from src.utilities import utilities
from src.entities.generic.entity import Entity


class Packet(Entity):
    """
    A packet is an entity generated by an event in the Area-of-Interest.
    """

    def __init__(self, simulator, event_ref=None):
        """

        @param time_step_creation:
        @param simulator:
        @param event_ref:
        """

        # id(self) is the id of this instance (unique for every new created packet),
        # the coordinates are those of the event
        super().__init__(simulator, id(self), event_ref.coords)

        self.__TTL = -1  # TTL is the number of hops that the packet crossed
        self.__max_TTL = self.simulator.packets_max_ttl
        self.time_step_creation = self.simulator.cur_step
        self.event_ref = event_ref
        self.number_retransmission_attempt = 0
        self.last_2_hops = []

        # add metrics: all the packets generated by the drones, either delivered or not (union of all the buffers)
        if event_ref is not None:
            self.add = self.simulator.metrics.drones_packets.add(self)

        self.optional_data = None  # list
        self.time_delivery = None

        # if the packet was sent with move routing or not
        self.is_move_packet = None

    @property
    def distance_from_depot(self):
        """
        This function computes the euclidean distance between the Depot and
        the current packet
        @return: A float number representing the distance between the Depot and the current packet
        """
        return utilities.euclidean_distance(self.simulator.depot_coordinates, self.coords)

    @property
    def is_expired(self):
        """
        A Packet expires if the deadline of the event expires, or the maximum TTL is reached
        """

        return self.simulator.cur_step > self.event_ref.deadline

    def to_json(self):
        """ return the json repr of the obj """

        return {"coord": self.coords,
                "i_gen": self.time_step_creation,
                "i_dead": self.event_ref.deadline,
                "id": self.identifier,
                "TTL": self.__TTL,
                "id_event": self.event_ref.identifier}

    def add_hop(self, drone):
        """ add a new hop in the packet """

        if len(self.last_2_hops) == 2:
            self.last_2_hops = self.last_2_hops[1:]  # keep just the last two HOPS
        self.last_2_hops.append(drone)

        # self.hops.add(drone.identifier)
        self.increase_TTL_hops()

    def increase_TTL_hops(self):
        self.__TTL += 1

    def __repr__(self):
        packet_type = str(self.__class__).split(".")[-1].split("'")[0]
        return packet_type + "id:" + str(self.identifier) + " event id: " + str(
            self.event_ref.identifier) + " c:" + str(self.coords)


class DataPacket(Packet):
    """
    A DataPacket, up to now it is not very different from a Packet...
    """

    def __init__(self, simulator, event_ref=None):
        super().__init__(simulator=simulator, event_ref=event_ref)


class ACKPacket(Packet):
    """
    An ACKPacket is created to reply to a generic packet.
    It uses null_event to be generated.
    """

    def __init__(self, simulator, source_drone, destination_drone, acked_packet, event_ref):
        super().__init__(simulator=simulator, event_ref=event_ref)

        self.acked_packet = acked_packet
        self.source_drone = source_drone
        self.destination_drone = destination_drone


class HelloPacket(Packet):
    """
    The hello message is responsible to spread information about a particular UAV
    to the neighborhood
    """

    def __init__(self, simulator, source_drone, current_position, current_speed, next_target, event_ref):
        super().__init__(simulator=simulator, event_ref=event_ref)
        self.current_position = current_position
        self.speed = current_speed
        self.next_target = next_target
        self.source_drone = source_drone  # Don't use this
